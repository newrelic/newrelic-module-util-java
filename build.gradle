plugins {
    id "java-library"
    id "maven-publish"
    id "signing"

}

// -Prelease=true will render a non-snapshot version
// All other values (including unset) will render a snapshot version.
def release = findProperty("release")
version = "2.0" + (release ? "" : "-SNAPSHOT")
group = "com.newrelic.agent.java"

// We put the Java >= 9 sources into a different sourceSet
// so we can easily apply different options in gradle and IDEA.
sourceSets {
    java9 {
        java {
            srcDirs = ['src/java9/java']
        }
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

// The main sourceSet should be compiled at the lowest Java version that is supported by the agent.
compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7
}

// Java 9 is the first break to new APIs for modules.
compileJava9Java {
    sourceCompatibility = JavaVersion.VERSION_1_9
    targetCompatibility = JavaVersion.VERSION_1_9
}

// if you are running gradle with Java 9 or higher, then
// we know that Java 9's "javac" command supports the --release flag,
// which supports creating .class files for Java 6 and higher.
// https://docs.oracle.com/javase/9/tools/javac.htm#JSWOR627
tasks.withType(JavaCompile) {
    options.compilerArgs.addAll(['--release', getSourceCompatibility().replaceFirst("^1\\.", "")])
}

dependencies {
    // This allows the java9 sourceSet to compile using classes from the main sourceSet.
    java9Implementation files(sourceSets.main.output.classesDirs) { builtBy compileJava }

    // NOTE: This project is extracted into the final newrelic.jar, and only
    //  classes from com.newrelic.** are included. The classes have been written
    //  to ensure that they have no dependencies other than JRE classes.
}

jar {
    from ("LICENSE")
    // Gradle requires manual construction of the paths for MRJars.
    // See JEP-238 for more information: https://openjdk.java.net/jeps/238
    into('META-INF/versions/9') {
        from sourceSets.java9.output
    }
    manifest.attributes(
            'Multi-Release': 'true'
    )
}

publishing {
    repositories {
        maven {
            def releasesRepoUrl = uri("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
            def snapshotsRepoUrl = uri("https://oss.sonatype.org/content/repositories/snapshots/")
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv("SONATYPE_USERNAME")
                password = System.getenv("SONATYPE_PASSWORD")
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = project.name
                description = "Multi-release jar for bootstrapping the Java Agent"
                url = "https://github.com/newrelic/newrelic-module-util-java"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        distribution = "repo"
                    }
                }
                developers {
                    developer {
                        id = "newrelic"
                        name = "New Relic"
                        email = "opensource@newrelic.com"
                    }
                }
                scm {
                    url = "git@github.com:newrelic/newrelic-module-util-java.git"
                    connection = "scm:git@github.com:newrelic/newrelic-module-util-java.git"
                }
            }
        }

    }
}

signing {
    def signingKeyId = findProperty("signingKeyId")
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications["mavenJava"]
}
